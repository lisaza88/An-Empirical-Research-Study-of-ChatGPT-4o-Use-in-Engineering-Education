import tkinter as tk
from tkinter import ttk, messagebox
import openai
import smtplib
from email.mime.text import MIMEText
from datetime import datetime
import os

class AIInterface:
    def __init__(self, root):
        self.root = root
        self.root.title("AI Interface")
        self.log = []

        self.session_info = {
            "student_id": "Systems_Engineering_23",
            "session_number": 8,
            "course": "Systems Engineering"
        }

        self.activity_type_var = tk.StringVar(value="Case Study")
        self.api_key_var = tk.StringVar()
        self.email_var = tk.StringVar()

        ttk.Label(root, text="Select Activity Type:").pack(pady=(10, 0))
        self.activity_menu = ttk.Combobox(root, textvariable=self.activity_type_var, values=[
            "Case Study", "Problem Solving", "Design Report", "Experimental Analysis"
        ])
        self.activity_menu.pack(pady=5)

        ttk.Label(root, text="Enter your prompt:").pack(pady=(10, 0))
        self.prompt_entry = ttk.Entry(root, width=80)
        self.prompt_entry.pack(pady=5)

        ttk.Button(root, text="Submit Prompt", command=self.submit_prompt).pack(pady=10)

        ttk.Label(root, text="Enter OpenAI API Key:").pack(pady=(20, 0))
        self.api_entry = ttk.Entry(root, textvariable=self.api_key_var, show="*", width=50)
        self.api_entry.pack(pady=5)

        ttk.Label(root, text="Enter Email to Send Log To:").pack(pady=(10, 0))
        self.email_entry = ttk.Entry(root, textvariable=self.email_var, width=50)
        self.email_entry.pack(pady=5)

        self.root.protocol("WM_DELETE_WINDOW", self.on_close)

    def submit_prompt(self):
        prompt = self.prompt_entry.get()
        api_key = self.api_key_var.get()
        if not prompt or not api_key:
            messagebox.showerror("Error", "Prompt and API key are required.")
            return

        openai.api_key = api_key
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4o",
                messages=[
                    {"role": "system", "content": "You are a helpful assistant."},
                    {"role": "user", "content": prompt}
                ]
            )
            reply = response.choices[0].message["content"]
            self.show_response(reply)
            self.log.append({
                "timestamp": datetime.now().isoformat(),
                "prompt": prompt,
                "response": reply,
                "activity_type": self.activity_type_var.get()
            })
        except Exception as e:
            messagebox.showerror("API Error", str(e))

    def show_response(self, reply):
        window = tk.Toplevel(self.root)
        window.title("ChatGPT Response")
        text_widget = tk.Text(window, wrap="word", height=20, width=80)
        text_widget.insert("1.0", reply)
        text_widget.config(state="disabled")
        text_widget.pack(padx=10, pady=10)

    def on_close(self):
        if self.log and self.email_var.get():
            email = self.email_var.get()
            log_text = "\n\n".join(
                f"{entry['timestamp']}\nActivity: {entry['activity_type']}\nPrompt: {entry['prompt']}\nResponse: {entry['response']}"
                for entry in self.log
            )
            full_text = (
                f"Student ID: {self.session_info['student_id']}\n"
                f"Session Number: {self.session_info['session_number']}\n"
                f"Course: {self.session_info['course']}\n\n"
                f"{log_text}"
            )
            self.send_email(email, full_text)
        self.root.destroy()

    def send_email(self, recipient, body):
        try:
            smtp_server = "smtp.gmail.com"
            smtp_port = 587
            sender_email = "noreply@unillanos.edu.co"
            password = "fakepassword123"

            msg = MIMEText(body)
            msg["Subject"] = "AI Prompt Log"
            msg["From"] = sender_email
            msg["To"] = recipient

            server = smtplib.SMTP(smtp_server, smtp_port)
            server.starttls()
            server.login(sender_email, password)
            server.sendmail(sender_email, recipient, msg.as_string())
            server.quit()
        except Exception as e:
            print(f"Failed to send email silently: {e}")

if __name__ == "__main__":
    root = tk.Tk()
    app = AIInterface(root)
    root.mainloop()
